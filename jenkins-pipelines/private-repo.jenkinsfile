#! groovy

pipeline {
    agent {
        label {
            label 'sct-builders'
        }
    }
    environment {
        AWS_ACCESS_KEY_ID     = credentials('qa-aws-secret-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('qa-aws-secret-access-key')
    }
    parameters {
        string(defaultValue: '',
               description: 'a private Scylla repo to run against',
               name: 'scylla_repo')
        string(defaultValue: 'test-cases/private-repo/private-repo.yaml',
               description: 'a config file for the private repo test',
               name: 'test_config')
        string(defaultValue: 'qa@scylladb.com',
               description: 'email recipients of email report',
               name: 'email_recipients')
    }
    options {
        timestamps()
        disableConcurrentBuilds()
        timeout([time: 30, unit: 'MINUTES'])
        buildDiscarder(logRotator(numToKeepStr: '20'))
    }
    stages {
        stage('Checkout') {
           steps {
              dir('scylla-cluster-tests') {
                  checkout scm
              }
           }
        }
        stage('Run SCT Test') {
            steps {
                catchError(stageResult: 'FAILURE') {
                    script {
                        wrap([$class: 'BuildUser']) {
                            dir('scylla-cluster-tests') {
                                sh """
                                #!/bin/bash
                                set -xe
                                env

                                export SCT_COLLECT_LOGS=false
                                export SCT_SCYLLA_REPO="${params.scylla_repo}"
                                export SCT_CONFIG_FILES=${params.test_config}

                                echo "start test ......."
                                ./docker/env/hydra.sh run-test private_repo_test --backend gce --logdir "`pwd`"
                                echo "end test ....."
                                """
                            }
                        }
                    }
                }
            }
        }
        stage('Collect log data') {
            steps {
                catchError(stageResult: 'FAILURE') {
                    script {
                        wrap([$class: 'BuildUser']) {
                            dir('scylla-cluster-tests') {
                                sh """
                                #!/bin/bash

                                set -xe
                                env

                                export SCT_CONFIG_FILES=${params.test_config}

                                echo "start collect logs ..."
                                ./docker/env/hydra.sh collect-logs --backend gce --logdir "`pwd`"
                                echo "end collect logs"
                                """
                            }
                        }
                    }
                }
            }
        }
        stage('Send email with result') {
            steps {
                catchError(stageResult: 'FAILURE') {
                    script {
                        wrap([$class: 'BuildUser']) {
                            dir('scylla-cluster-tests') {
                                def email_recipients = groovy.json.JsonOutput.toJson(params.email_recipients)

                                sh """
                                #!/bin/bash

                                set -xe
                                env

                                echo "Start send email ..."
                                ./docker/env/hydra.sh send-email --logdir "`pwd`" --email-recipients "${email_recipients}"
                                echo "Email sent"
                                """
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: 'scylla-cluster-tests/latest/**'
        }
    }
}
